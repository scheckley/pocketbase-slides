---
title: "Pocketbase"
author: "Stephen Checkley"
title-slide-attributes:
  data-background-image: ./images/background.png
  data-background-size: fill
  data-background-opacity: "0.5"
format:
  revealjs:
    logo: ./images/logo.png
    css: logo.css
    footer: "RSE Skills 'n' Learn, 8th Oct 2024"
    transition: fade
    background-transition: fade
    transition-speed: fast
    theme: [default, ./kanagawa.scss]
    highlight-style: monokai
  html:
    theme: [default, ./kanagawa.scss]
    css: logo.css
    highlight-style: monokai
    embed-resources: true
---

## Introduction {.smaller}

- A lightweight, open-source back-end solution.
  - <https://pocketbase.io>
- Built in Go.
- 1 file, small (40mb) and easy to deploy.
  - minimal resource requirement (2 vCPU, 4GB Ram).
  - no dependencies.
- Integrates with popular front-end frameworks.
  - Svelte, React, Vue, AlpineJS etc etc...
  - HTMX + Templ + Go :)

## Overview {.smaller}

- Real-time database (SQLite):
  - schema builder, data validations, real-time subscriptions REST API.
    - via SSE (server-sent events)
- Authentication:
  - email/password and 15+ OAuth2 providers.
- File Storage:
  - local or S3
- Administrator dashboard.
- Extendable:
  - Go and JavaScript hooks to create custom backend.
  - Dart and Javascript SDK.

## Use cases {.smaller}

- Rapid prototyping.
- Small/Mid scale e-Commerce or CMS platforms.
  - SQLite still serves 10,000+ persistent realtime connections.
  - <https://github.com/pocketbase/benchmarks>

## Not use cases {.smaller}

- SQLite - might not be suitable for large, enterprise scale applications.
- Pocketbase is in active development and breaking changes do happen.
  - currently version 0.22.
  - Only scales vertically.

- Pocketbase is self-hosted only.
  - But Fly.io & PocketHost.io will host VM's.

## Alternatives {.smaller}

- Google Firebase
  - Fully-managed "back-end as a service". Scales, but not open source.
  - Managed Google service, Google cloud, Firestore, Realtime DB.
  - Free tier / pay as you go.

- Supabase
  - Open-source Firebase alternative, built on PostgreSQL and Elixir
  - Self hosted or paid hosting.

both require more devops experience to deploy and maintain vs Pocketbase.

## Anyways, back to Pocketbase... {.smaller .scrollable footer='false'}

Pocketbase can be downloaded as pre-built executable.

```bash
./pocketbase serve
```

![instant back-end services](./images/pocketbase_serve.png)

![Administator panel](./images/admin_screen.png)

![Logs panel](./images/logs_screen.png)

## Directory structure {.smaller}

![](./images/directory_tree.png)

- `pb_data` - stores your application data, uploaded files, etc. (usually should be added in .gitignore).
- `pb_migrations` - contains JS migration files with your collection changes (can be safely committed in your repository)
- if `pb_public` directory exists, serves the static content from it (html, css, images, etc.)

## Collections {.smaller .scrollable footer='false'}

- Collections represents your application data.
- Under the hood they are plain SQLite tables that are generated automatically with the collection name and fields (aka. columns).

- Single entry of a collection is called a record - i.e, a single row in the SQL table.

![](./images/admin_collection.png)

- Example fields:

![](./images/collection_fields.png)

- You could create collections and records from the Admin UI or the Web API.
- Usually, collections are created from the Admin UI and records managed by the API using the client-side SDKs.

## Collection types: Base, View, and Auth {.smaller .scrollable footer='false'}

- Base collections
  - Default collection type.
    - used to store any application data (eg. articles, products, posts, etc.).

  - 3 default system fields that are always available and automatically populated:
    - id
    - created
    - updated
      - Only the id can be explicitly set (15 characters string).

- View collections
  - A read-only collection type where the data is populated from a plain SQL SELECT statement, allowing users to perform aggregations or any other custom queries.

  ```sql
  SELECT
    posts.id,
    posts.name,
    count(comments.id) as totalComments
  FROM posts
  LEFT JOIN comments on comments.postId = posts.id
  GROUP BY posts.id
  ```

- Auth collection
  - everything from the Base collection plus special fields to manage users and authentication.

    - id, created, updated, username, email, emailVisibility, verified.

  - You can have as many Auth collections as you want
    - (eg. users, managers, staffs, members, clients, etc.)
    - each with their own set of fields, separate login (email/username + password or OAuth2) and models managing endpoints.
    - <https://pocketbase.io/docs/collections/>

## API {.smaller .scrollable footer='false'}

- API Rules are collection access controls and data filters.

- Each collection has 5 rules, corresponding to the specific API action:
  - listRule
  - viewRule
  - createRule
  - updateRule
  - deleteRule

- 3 settings:
  - locked (default) (same as `null`)
    - the action could be performed only by an authorized admin.
  - empty string.
  - anyone will be able to perform the action (admins, authorized users and guests)
  - non-empty string.
    - only users (authorized or not) that satisfy the rule filter expression will be able to perform this action.

- PocketBase API Rules act also as records filter.

## Client-side APKs {.smaller .scrollable footer='false'}

- Dart
- Javascript
  - <https://github.com/pocketbase/js-sdk#definitions>
  
  ![](./images/api-preview.png)

## Authentication {.smaller .scrollable footer='false'}

- Authentication as admin or app user.
- OAuth2 integration.

<hline>

- Admin:

```JavaScript
import PocketBase from 'pocketbase';

const pb = new PocketBase('http://127.0.0.1:8090');

...

const authData = await pb.admins.authWithPassword('test@example.com', '1234567890');

// after the above you can also access the auth data from the authStore
console.log(pb.authStore.isValid);
console.log(pb.authStore.token);
console.log(pb.authStore.model.id);

// "logout" the last authenticated account
pb.authStore.clear();
```

- App user:

```JavaScript
import PocketBase from 'pocketbase';

const pb = new PocketBase('https://pocketbase.io');

...

const authData = await pb.collection('users').authWithPassword('YOUR_USERNAME_OR_EMAIL', '1234567890');

// after the above you can also access the auth data from the authStore
console.log(pb.authStore.isValid);
console.log(pb.authStore.token);
console.log(pb.authStore.model.id);

// "logout" the last authenticated model
pb.authStore.clear();
```

- OAuth2 integration:

```JavaScript
import PocketBase from 'pocketbase';

const pb = new PocketBase('https://pocketbase.io');

...

// This method initializes a one-off realtime subscription and will
// open a popup window with the OAuth2 vendor page to authenticate.
//
// Once the external OAuth2 sign-in/sign-up flow is completed, the popup
// window will be automatically closed and the OAuth2 data sent back
// to the user through the previously established realtime connection.
//
// If the popup is being blocked on Safari, you can try the suggestion from:
// https://github.com/pocketbase/pocketbase/discussions/2429#discussioncomment-5943061.
const authData = await pb.collection('users').authWithOAuth2({ provider: 'google' });

// after the above you can also access the auth data from the authStore
console.log(pb.authStore.isValid);
console.log(pb.authStore.token);
console.log(pb.authStore.model.id);

// "logout" the last authenticated model
pb.authStore.clear();
```

OAuth2 providers, as of time of writing:
![](./images/providers.png)

## File storage {.smaller .scrollable footer='false'}

- Add a file field to your collection.
  ![](./images/file-field.png)

- The SDK can auto-detect the request content type based on parameters.
  - E.g create a new Record and upload multiple files to the example file field _"documents"_:

```JavaScript
// Example HTML:
// <input type="file" id="fileInput" />

import PocketBase from 'pocketbase';

const pb = new PocketBase('http://127.0.0.1:8090');

...

const formData = new FormData();

const fileInput = document.getElementById('fileInput');

// listen to file input changes and add the selected files to the form data
fileInput.addEventListener('change', function () {
    for (let file of fileInput.files) {
        formData.append('documents', file);
    }
});

// set some other regular text field value
formData.append('title', 'Hello world!');

...

// upload and create new record
const createdRecord = await pb.collection('example').create(formData);
```

- Each uploaded file will be stored with the original filename (sanitized) and suffixed with a random (10 chars) part (eg. _test_52iWbGinWd.png_).

## Deleting data {.smaller}

```Javascript
import PocketBase from 'pocketbase';

const pb = new PocketBase('http://127.0.0.1:8090');

...

// delete all "documents" files
await pb.collection('example').update('RECORD_ID', {
    'documents': null,
});

// delete individual files
await pb.collection('example').update('RECORD_ID', {
    'documents-': ["file1.pdf", "file2.txt"],
});
```

## File URL {.smaller .scrollable footer='false'}

- Each uploaded file can be accessed by requesting its file url:

`http://127.0.0.1:8090/api/files/COLLECTION_ID_OR_NAME/RECORD_ID/FILENAME`

- If you already have a Record model instance, the SDKs provide a convenient method to generate a file url by its name.

```Javascript
import PocketBase from 'pocketbase';

const pb = new PocketBase('http://127.0.0.1:8090');

...

const record = await pb.collection('example').getOne('RECORD_ID');

// get only the first filename from "documents"
//
// note:
// "documents" is an array of filenames because
// the "documents" field was created with "Max Files" option > 1;
// if "Max Files" was 1, then the result property would be just a string
const firstFilename = record.documents[0];

// returns something like:
// http://127.0.0.1:8090/api/files/example/kfzjt5oy8r34hvn/test_52iWbGinWd.png?thumb=100x250
const url = pb.files.getUrl(record, firstFilename, {'thumb': '100x250'});
```

## Protected files {.smaller .scrollable footer='false'}

- By default all files are public accessible if you know their full url.

- You can mark the file field as Protected and then request the file with a special short-lived file token.

![](./images/file-options.png)

```Javascript
import PocketBase from 'pocketbase';

const pb = new PocketBase('http://127.0.0.1:8090');

...

// authenticate
await pb.collection('users').authWithPassword('test@example.com', '1234567890');

// generate a file token
const fileToken = await pb.files.getToken();

// retrieve an example protected file url (will be valid ~2min)
const record = await pb.collection('example').getOne('RECORD_ID');
const url = pb.files.getUrl(record, record.myPrivateFile, {'token': fileToken});
```

## File storage {.smaller .scrollable footer='false'}

- By default PocketBase uses the local file system to store uploaded files (in the `pb_data/storage directory`).

- Also S3 compatible storage
  - (AWS S3, MinIO, Wasabi, DigitalOcean Spaces, Vultr Object Storage, etc.).

![](./images/files-storage.png)

## The obligatory CRUD app {.smaller .scrollable footer='false'}

A crud app in 1 file :)

- AlpineJS
- Pico CSS
- Boxicons
- <https://codeberg.org/scheckley/pocketbase>

[![](./images/crud_app.png)](http://127.0.0.1:8090)
